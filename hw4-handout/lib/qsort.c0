#use <rand>
#use <util>

//quick sort a string->int dictionary based on its ints.  
//note: invariants are deactivated because you need them for int but arrayutil.c0 has them for string
//also this sorts highest to lowest, so ge_seg and le_seg etc. are misleading names.  

int partition(int[] A, string[] B, int lower, int pivot_index, int upper)
//@requires 0 <= lower && lower <= pivot_index;
//@requires \length(A) == \length(B);
//@requires pivot_index < upper && upper <= \length(A);
//@ensures lower <= \result && \result < upper;
//ensures ge_seg(A[\result], A, lower, \result);
//ensures le_seg(A[\result], A, \result+1, upper);
{
  int pivot = A[pivot_index];
  swapint(A, pivot_index, upper-1);
  swap(B, pivot_index, upper-1);

  int left = lower;
  int right = upper-2;
  while (left <= right)
    //@loop_invariant lower <= left && left <= right+1 && right+1 < upper;
    //loop_invariant ge_seg(pivot, A, lower, left);
    //loop_invariant le_seg(pivot, A, right+1, upper-1);
    {
      if (A[left] >= pivot) {
        left++;
      } else { //@assert A[left] < pivot;
        swapint(A, left, right);
        swap(B, left, right);
        right--;
      }
    }
  //@assert left == right+1;
  //@assert A[upper-1] == pivot;

  swapint(A, left, upper-1);
  swap(B, left, upper-1);
  return left;
}

void qsort(int[] A, string[] B, int lower, int upper, rand_t gen)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
//ensures is_sorted(A, lower, upper);
{
  if (upper-lower <= 1) return;

  int pivot_index = lower + abs(rand(gen) % (upper-lower));
  /* pivot_index = upper-1 or pivot_index = 0 gives O(n^2) for sorted array */
  /* pivot_index = lower+(upper-lower)/2 efficiency depends on input distribution */
  /* better yet would be: median of 3 random elements */

  int mid = partition(A, B, lower, pivot_index, upper);
  qsort(A, B, lower, mid, gen);
  qsort(A, B, mid+1, upper, gen);
  return;
}

void sort(int[] A, string[] B, int lower, int upper)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
//ensures is_sorted(A, lower, upper);
{
  int seed = 0xc0c0ffee;
  rand_t gen = init_rand(seed);

  qsort(A, B, lower, upper, gen);
  return;
}
